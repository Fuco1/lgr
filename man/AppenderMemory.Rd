% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Appender.R
\name{AppenderMemory}
\alias{AppenderMemory}
\title{Abstract class for logging to memory buffers}
\description{
This is an \strong{abstract class} and as such cannot be instantiated directly.
It is exported for package developers that want to extend it

AppenderMemory is extended by Appenders that retain an in-memory event
buffer, such as \link{AppenderBuffer} and \link[lgrExtra:AppenderPushbullet]{lgrExtra::AppenderPushbullet}.
}
\section{Fields}{


\describe{
\item{\verb{buffer_size, set_buffer_size(x)}}{\code{integer} scalar \verb{>= 0} Number of
\link{LogEvents} to buffer.
}

\item{\code{buffer_events}, \code{buffer_df}, \code{buffer_dt}}{
The contents of the buffer as a \code{list} of \link[=LogEvent]{LogEvents}, a
\code{data.frame} or a \code{data.table}.
}

\item{\code{flush_threshold}, \code{set_flush_threshold()}}{\code{integer} or \code{character}
\link[=log_level]{log level}. Minimum event level that will trigger flushing of
the buffer (set \code{NULL} for no flushing). This behaviour is implemented
through \code{should_flush()}, and you can modify that function for different
behaviour.
}
\item{\code{should_flush(event)}, \code{set_should_flush(x)}}{
A function with exactly one arguments: \code{event}.
If the function returns \code{TRUE}, flushing of the buffer
is triggered. Defaults to flushing if an event of level \code{error}
or higher is registered.}
}
}

\seealso{
\link{LayoutFormat}

Other abstract classes: 
\code{\link{AppenderTable}},
\code{\link{Filterable}}
}
\concept{abstract classes}
\section{Super classes}{
\code{\link[lgr:Filterable]{lgr::Filterable}} -> \code{\link[lgr:Appender]{lgr::Appender}} -> \code{AppenderMemory}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{AppenderMemory$new()}}
\item \href{#method-append}{\code{AppenderMemory$append()}}
\item \href{#method-flush}{\code{AppenderMemory$flush()}}
\item \href{#method-clear}{\code{AppenderMemory$clear()}}
\item \href{#method-set_buffer_size}{\code{AppenderMemory$set_buffer_size()}}
\item \href{#method-set_should_flush}{\code{AppenderMemory$set_should_flush()}}
\item \href{#method-set_flush_on_exit}{\code{AppenderMemory$set_flush_on_exit()}}
\item \href{#method-set_flush_on_rotate}{\code{AppenderMemory$set_flush_on_rotate()}}
\item \href{#method-set_flush_threshold}{\code{AppenderMemory$set_flush_threshold()}}
\item \href{#method-show}{\code{AppenderMemory$show()}}
\item \href{#method-format}{\code{AppenderMemory$format()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="lgr" data-topic="Filterable" data-id="add_filter">}\href{../../lgr/html/Filterable.html#method-add_filter}{\code{lgr::Filterable$add_filter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="lgr" data-topic="Filterable" data-id="filter">}\href{../../lgr/html/Filterable.html#method-filter}{\code{lgr::Filterable$filter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="lgr" data-topic="Filterable" data-id="remove_filter">}\href{../../lgr/html/Filterable.html#method-remove_filter}{\code{lgr::Filterable$remove_filter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="lgr" data-topic="Filterable" data-id="set_filters">}\href{../../lgr/html/Filterable.html#method-set_filters}{\code{lgr::Filterable$set_filters()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="lgr" data-topic="Appender" data-id="set_layout">}\href{../../lgr/html/Appender.html#method-set_layout}{\code{lgr::Appender$set_layout()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="lgr" data-topic="Appender" data-id="set_threshold">}\href{../../lgr/html/Appender.html#method-set_threshold}{\code{lgr::Appender$set_threshold()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$new(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\if{latex}{\out{\hypertarget{method-append}{}}}
\subsection{Method \code{append()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$append(event)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-flush"></a>}}
\if{latex}{\out{\hypertarget{method-flush}{}}}
\subsection{Method \code{flush()}}{
Sends the buffer's contents to all attached Appenders and
then clears the Buffer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$flush()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
Clears the buffer, discarding all buffered Events
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$clear(self)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_buffer_size"></a>}}
\if{latex}{\out{\hypertarget{method-set_buffer_size}{}}}
\subsection{Method \code{set_buffer_size()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$set_buffer_size(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_should_flush"></a>}}
\if{latex}{\out{\hypertarget{method-set_should_flush}{}}}
\subsection{Method \code{set_should_flush()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$set_should_flush(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_flush_on_exit"></a>}}
\if{latex}{\out{\hypertarget{method-set_flush_on_exit}{}}}
\subsection{Method \code{set_flush_on_exit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$set_flush_on_exit(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_flush_on_rotate"></a>}}
\if{latex}{\out{\hypertarget{method-set_flush_on_rotate}{}}}
\subsection{Method \code{set_flush_on_rotate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$set_flush_on_rotate(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_flush_threshold"></a>}}
\if{latex}{\out{\hypertarget{method-set_flush_threshold}{}}}
\subsection{Method \code{set_flush_threshold()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$set_flush_threshold(level)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-show"></a>}}
\if{latex}{\out{\hypertarget{method-show}{}}}
\subsection{Method \code{show()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$show(threshold = NA_integer_, n = 20L)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppenderMemory$format(color = FALSE, ...)}\if{html}{\out{</div>}}
}

}
}
