% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Appender.R
\name{AppenderMemory}
\alias{AppenderMemory}
\title{Abstract Class for Logging to Memory Buffers}
\description{
\strong{Abstract classes} are exported for package developers that want to extend
them, they cannot be instantiated directly.

AppenderMemory is extended by Appenders that retain an in-memory event
buffer, such as \link{AppenderBuffer} and \link{AppenderPushbullet}.
}
\section{Usage}{
\preformatted{
x <- x$get_inherit()$new(layout = Layout$new(), threshold = NA_integer_)

x$append(event)
x$flush()
x$set_buffer_size(x)
x$set_should_flush(x)
x$set_flush_threshold(level)
x$show(threshold = NA_integer_, n = 20L)
x$set_threshold(level)
x$set_layout(layout)
x$filter(event)
x$set_filters(filters)

x$buffer_size
x$buffered_events
x$data
x$dt
x$flush_threshold
x$should_flush
x$destination
x$layout
x$threshold
x$filters

}
}

\section{Fields}{


\describe{
\item{\code{buffer_size, set_buffer_size(x)}}{\code{integer} scalar. Number of \link{LogEvents} to buffer}

\item{\code{flush_threshold}, \code{set_flush_threshold()}}{\code{integer} or \code{character}
\link[=log_level]{log level}. Minimum event level that will trigger flushing of
the buffer. This behaviour is implemented through \code{should_flush()},
and you can modify that function for different behaviour.
}
\item{\code{should_flush(event, obj)}, \code{set_should_flush(x)}}{
A function with exactly two arguments: \code{event} and \code{obj}. When \code{append()}
is triggered for this Appender, the LogEvent will be passed to \code{event},
the Appender itself will get passed to \code{obj}.
This means that you can f.e. use \code{obj$threshold} to access the threshold
of the Appender. If the function returns \code{TRUE}, flushing of the buffer
is triggered. Defaults to flushing if a \code{FATAL} event is registered }
}



\describe{
\item{\code{dt}}{Get the log recorded by this \code{Appender} as a \code{data.table}
with a maximum of \code{buffer_size} rows}
}



\describe{
\item{\code{data}}{Get the log recorded by this \code{Appender} as a \code{data.frame}}
}



\describe{
\item{\code{threshold}, \code{set_threshold(level)}}{\code{character} or \code{integer} scalar.
The minimum log level that triggers this logger. See \link{log_levels}}
\item{\code{layout}, \code{set_layout(layout)}}{a \code{Layout} that will be used for
formatting the \code{LogEvents} passed to this Appender}
\item{\code{destination}}{The output destination of the \code{Appender} in
human-readable form (mainly for print output)}
}



\describe{
\item{\code{filters}, \code{set_filters(filters)}}{a \code{list} of predicates (functions
that return either \code{TRUE} or \code{FALSE}). These functions must have exactly
two arguments: \code{event} and \code{obj}. When the \code{filter()} method of the
Filterable is invoked on a LogEvent, that event will get passed to \code{event},
the Filterable will get passed to \code{obj}. This means that you can,
f.e. use \code{obj$threshold} to access the threshold of the Appender/Logger
that is using the filter.
If all of these functions evaluate to \code{TRUE} the LogEvent is passed on.
Since LogEvents have reference semantics, filters can also be abused to
modify them before they are passed on. Look at the source code of
\code{\link[=with_log_level]{with_log_level()}} or \code{\link[=with_log_value]{with_log_value()}} for examples.
}
}
}

\section{Methods}{


\describe{
\item{\code{flush()}}{Manually trigger flushing of the buffer}
}


\describe{
\item{\code{show(n, threshold)}}{Show the last \code{n} log entries with a log level
bellow \code{threshold}. The log entries will be formated for console output
via this Appenders \link{Layout}}
}


\describe{
\item{\code{append(event)}}{Tell the Appender to process a \link{LogEvent} \code{event}.
This method is usually not called by the user, but invoked by a
\link{Logger}
}
}


\describe{
\item{\code{filter(event)}}{Determine whether the LogEvent \code{x} should be passed
on to Appenders (\code{TRUE}) or not (\code{FALSE}). See also the active binding
\code{filters}}
}
}

\seealso{
\link{LayoutFormat}

Other abstract classes: \code{\link{AppenderDigest}},
  \code{\link{AppenderTable}}, \code{\link{Filterable}}
}
\concept{abstract classes}
