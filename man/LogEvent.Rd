% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LogEvent.R
\name{LogEvent}
\alias{LogEvent}
\alias{LogEvents}
\title{Log Events}
\description{
A \code{LogEvent} is a single unit of data that should be logged. It usually
contains at minimum the \link{log_level}, a timestamp and the log message.
\code{LogEvents} are created by a \link{Logger}, and then processed a \link{Appenders} and
\link{Layouts}.
}
\section{Usage}{
\preformatted{x <- LogEvent$new(logger, level = NA, timestamp = Sys.time(), caller = NA,
  msg = NA)

x$clone(deep = FALSE)

x$caller
x$level
x$level_name
x$logger
x$msg
x$timestamp
x$values
}
}

\section{Creating LogEvents}{


\strong{not yet stable}
Currently custom LogEvents are not officially supported in yog, but a lot of
the infrastructure to make them possible is already in place. If you require
this function, please upvote
\href{https://github.com/s-fleck/yog/issues/4}{this issue}

\describe{
\item{logger}{\code{\link{Logger}} scalar. The \code{Logger} this \code{LogEvent} is
associated with}
}
}

\section{Fields}{


Log Evnets contain the following data fields
\itemize{
\item \code{level}: The \link{log_level} of the event
\item \code{timestamp}: \code{POSIXct}.
\item \code{caller}: \code{character}. the function that called this event
\item \code{msg}: \code{character}. the log message.
\item \code{logger} the \code{Logger} that created the \code{LogEvent}. See examples.
}

Usually the above values will be scalars, but (except for \code{"logger"}) they
can also be vectors if they are all of the same length (or scalars that will
be recycled). In this case the event will be treated by the \link{Appenders} and
\link{Layouts} as if several separate events.

Log events also contain the following active bindings:
\itemize{
\item \code{value}: an active binding that returns a named \code{list} containing all the
above values.
\item \code{level_name}  the log level as a \code{character} string.
}
}

\examples{

# Usually you do not create a LogEvent in this manner, it is rather provided
# by the Logger

l <- Logger$new("dummy logger", appenders = NULL)
l$error("foo bar")

# The last LogEvent produced by a logger is saved to the last_event field
l$last_event
l$last_event$level
l$last_event$level_name
l$last_event$msg

# Also contains a reference to the complete logger that created it
l$last_event$logger$name
l$last_event$logger$user

# This is really a reference to the complete logger, so the following is
# also possible (though nonsensical)
l$last_event$logger$last_event$msg
identical(l, l$last_event$logger)

# Because LogEvents can also be vectors, the following works:
l$warn(c("a", "vector", "log", "message"))

}
