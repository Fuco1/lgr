% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Layout.R
\name{LayoutJson}
\alias{LayoutJson}
\title{LayoutJson}
\description{
Format an LogEvent as JSON
}
\section{Usage}{
\preformatted{lo <- LayoutJson$new()

# methods
 lo$format_event(x)

# fields / active bindings
 lo$event_vals
 lo$logger_vals
 lo$other_vals
 lo$toJSON_args

}
}

\section{Creating a new LayoutJson}{


If you want logging for a Project (f.e a Package you are developing) that is
separate from the global logging, you can create a new logger with
\code{Logger$new()}. If you just want to add different outputs (for example
logfiles) to the root logger, look into \link{Appenders}.

\describe{
\item{name}{\code{character} scalar. Name of the Logger. Should be unique amongst
Loggers. If you define a logger for an R Package, the logger should have
the same name as the Package.}
\item{appenders}{\code{list} of \link{Appender}s. The appenders used by this logger
to write log entries to the console, to files, etc...}
\item{threshold}{\code{character} or \code{integer} scalar. The minimum log level
that triggers this logger}
\item{user}{\code{character} scalar. The current user name or email adress.
This information can be used by the appenders}
\item{parent}{a \code{Logger}. Usually the Root logger. All Loggers must be
descentents of the Root logger for yog to work as intended.}

\item{handle_exception}{a \code{function} that takes a single argument \code{e}.
The function used to handle errors that occur durring loging. Default
to demoting any error to a \link{warning}}
}
}

\section{Methods}{


\describe{
\item{\code{format_event(x)}}{format a LogEvent}

\item{\code{event_vals}}{Names of the fields of the event (i.e the LogEvent)
to include in the resulting JSON object.
}

\item{\code{logger_vals}}{Names of the fields of the Logger that produced the
LogEvent to include in the resulting JSON object.
}

\item{\code{other_vals}}{A named \code{list} of any kind of R value that can be
serialized to Json. Functions in this `list`` will be executed with no
arguments and their results will be included in the results object
(see examples)
}
}
}

\examples{

# setup a dummy LogEvent
event <- LogEvent$new(
  logger = Logger$new("dummy logger", user = "testuser"),
  level = 200,
  timestamp = Sys.time(),
  caller = NA_character_,
  msg = "a test message"
)
lo <- LayoutJson$new(
  event_vals = c("level", "timestamp", "msg"),
  logger_vals = "user",
  other_vals = list(pid = Sys.getpid, random_number = function() runif(3), teststring = "blah")
)
lo$format_event(event)
lo$format_event(event)

}
\seealso{
\code{\link[=read_json_lines]{read_json_lines()}}, \url{http://jsonlines.org/}
}
