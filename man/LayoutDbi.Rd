% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Layout.R
\name{LayoutDbi}
\alias{LayoutDbi}
\alias{LayoutSqlite}
\alias{LayoutRjdbc}
\title{Format Log Events for Output to Databases}
\description{
LayoutDbi can contain \code{col_types} that \link{AppenderDbi} can use to create new
database tables; however, it is safer and more flexible to set up the log
table up manually with an \code{SQL CREATE TABLE} statement instead. LayoutDbi
also contain a \code{format_data()} method that is applied to data.frames
before they are insterted into the database by AppenderDbi.
}
\section{Usage}{
\preformatted{
x <- x$new(col_types = NULL)

x$format_table_name(x)
x$format_colnames(x)
x$format_data(x)
x$set_col_types(x)
x$sql_create_table(table)
x$clone(deep = FALSE)
x$format_event(event)

x$col_names
x$col_types

}
}

\section{Creating a New Layout}{




Layouts are instantiated with \code{<LayoutSubclass>$new()}. For a description of
the arguments to this function please refer to the Fields section.
}

\section{Fields}{


\describe{
\item{\code{col_types}}{A named \code{character} vector of column types supported by
the target database. If not \code{NULL} this is used by \link{AppenderDbi} or similar
Appenders to create a new database table on instantion of the Appender. If
the target database table already exists, \code{col_types} is not used.
}
\item{\code{col_names}}{Convenience method to get the names of the \code{col_types}
vector}
}
}

\section{Methods}{




\describe{
\item{\code{format_event(event)}}{format a \link{LogEvent}}
}
}

\section{Database Specific Layouts}{


Different databases have different data types and features. Currently the
following \code{LayoutDBI} subclasses exist that deal with specific databases,
but this list is expected to grow as lgr matures:
\itemize{
\item \code{LayoutSQLite}: Needs its own Layout because SQLite does not support
\code{timestamps}
\item \code{LayoutDBI}: For all other datbases
}

The utility function \code{\link[=select_dbi_layout]{select_dbi_layout()}} returns the appropriate
Layout for a DBI connection.
}

\examples{
# setup a dummy LogEvent
event <- LogEvent$new(
  logger = Logger$new("dummy logger"),
  level = 200,
  timestamp = Sys.time(),
  caller = NA_character_,
  msg = "a test message"
)

# defaults
lo <- LayoutDbi$new()
lo$format_event(event)

# SQLite does not support timestamps so LayoutSqlite converts them to text
lo <- LayoutSqlite$new()
str(lo$format_event(event))

# advanced example that supports a custom_field:
lo <- LayoutDbi$new(
  col_types =  c(
    timestamp = "timestamp",
    level = "smallint",
    msg = "varchar(2048)",
    custom_field = "integer"
  )
)

event <- LogEvent$new(
  logger = Logger$new("dummy logger"),
  level = 200,
  timestamp = Sys.time(),
  caller = NA_character_,
  msg = "a test message",
  custom_field = "blubb"
)

lo$format_event(event)

}
\seealso{
\code{\link[=select_dbi_layout]{select_dbi_layout()}}, \link[DBI:DBI]{DBI::DBI},

Other Layouts: \code{\link{LayoutFormat}},
  \code{\link{LayoutGlue}}, \code{\link{LayoutJson}},
  \code{\link{Layout}}
}
\concept{Layouts}
\concept{database layouts}
