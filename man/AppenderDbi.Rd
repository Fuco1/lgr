% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Appender.R
\name{AppenderDbi}
\alias{AppenderDbi}
\title{Log to Databases via DBI}
\description{
Log to a database table with any \strong{DBI} compatabile backend. AppenderDbi
does \emph{not} support case sensitive / quoted column names.
}
\section{Usage}{
\preformatted{
x <- x$new(conn, table, threshold = NA_integer_,
  layout = select_dbi_layout(conn, table), close_on_exit = TRUE)

x$set_close_on_exit(x)
x$show(n = 20, threshold = NA_integer_)
x$append(event)
x$set_threshold(level)
x$set_layout(layout)
x$filter(event)
x$set_filters(filters)

x$close_on_exit
x$conn
x$data
x$destination
x$table
x$dt
x$layout
x$threshold
x$filters

}
}

\section{Creating a New AppenderDbi}{


\describe{
\item{\code{conn}}{a \link[DBI:dbConnect]{DBI connection}}
}
}

\section{Fields}{

\describe{
\item{\code{close_on_exit}, \code{set_close_on_exit()}}{\code{TRUE} or \code{FALSE}. Close the
Database connection when the Logger is removed?}
\item{\code{data}}{Querry the whole log from the Database and return it as a
\code{data.frame}}
\item{\code{conn}}{get the DBI connection object}
\item{\code{table}}{Name of the target database table}
}



\describe{
\item{\code{data}}{Get the log recorded by this \code{Appender} as a
\code{data.frame}}
}



\describe{
\item{\code{threshold}, \code{set_threshold(level)}}{\code{character} or \code{integer} scalar.
The minimum log level that triggers this logger. See \link{log_levels}}
\item{\code{layout}, \code{set_layout(layout)}}{a \code{Layout} that will be used for
formatting the \code{LogEvents} passed to this Appender}
\item{\code{destination}}{The output destination of the \code{Appender} in
human-readable form (mainly for print output)}
}



\describe{
\item{\code{filters}, \code{set_filters(filters)}}{a \code{list} of predicates (functions
that return either \code{TRUE} or \code{FALSE}). If all of these functions evaluate
to \code{TRUE} the LogEvent is passed on. Since
LogEvents have reference semantics, filters can also be abused to modify
LogEvents before they are passed on. Look at the source code of
\code{\link[=with_log_level]{with_log_level()}} or \code{\link[=with_log_value]{with_log_value()}} for examples.
}
}
}

\section{DBI Layouts}{


Layouts for relational database tables are tricky as they have very strict
column types and further restrictions. On top of that implementation details
vary between database backends.

To make setting up \code{AppenderDbi} as painless as possible, the helper
function \code{\link[=select_dbi_layout]{select_dbi_layout()}} tries to automatically determine sensible
\link{LayoutDbi} settings based on \code{conn} and - if it exists in the database
already - \code{table}. If \code{table} does not
exist in the database and you start logging, a new table will be created
with the \code{col_types} from \code{layout}; however, a more flexible approach is
to create the table manually first using an \code{SQL CREATE TABLE} statement.
}

\section{Creating a New Appender}{


New Appenders are instantiated with \code{Appender$new()}. For the arguments to
\code{new()} please refer to the section \emph{Fields}. You can also modify those
fields after the Appender has been created with setters in the form of
\code{appender$set_<fieldname>(value)}
}

\section{Methods}{


\describe{
\item{\code{show(n, threshold)}}{Show the last \code{n} log entries with a
log level bellow \code{threshold}.}
}


\describe{
\item{\code{append(event)}}{Write the \link{LogEvent} \code{event} to a destination}
}


\describe{
\item{\code{filter(event)}}{Determine whether the LogEvent \code{x} should be passed
on to Appenders (\code{TRUE}) or not (\code{FALSE}). See also the active binding
\code{filters}}
}
}

\seealso{
Other Appenders: \code{\link{AppenderBuffer}},
  \code{\link{AppenderConsole}}, \code{\link{AppenderDt}},
  \code{\link{AppenderFile}}, \code{\link{AppenderJson}},
  \code{\link{AppenderRjdbc}}, \code{\link{AppenderTable}},
  \code{\link{Appender}}
}
\concept{Appenders}
